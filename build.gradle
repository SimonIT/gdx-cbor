buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.vanniktech:gradle-maven-publish-plugin:0.29.0'
	}
}

plugins {
	id("com.diffplug.spotless") version "7.0.2"
	id "info.solidsoft.pitest" version "1.15.0"
	id 'org.sonatype.gradle.plugins.scan' version '2.8.3'
	id "me.champeau.jmh" version "0.7.2"
}

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

allprojects {

	apply plugin: 'java-library'
	apply plugin: 'com.vanniktech.maven.publish'
	apply plugin: "com.diffplug.spotless"
	apply plugin: 'info.solidsoft.pitest'

	//Obviously, change the next line to match your project name.
	def projectName = 'gdx-cbor'

	//Change this to whatever Maven Central group you might publish to,
	//which is probably not this one if you aren't Tommy Ettinger.
	group 'dev.simonit'

	version "$VERSION_NAME" // You can set the version in gradle.properties .

	// This just makes sure that a Javadoc JAR and a sources JAR are produced.
	mavenPublishing {
		configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
	}

	// This sets the Javadoc JAR to have hopefully the correct name. This may need adjustment.
	mavenPlainJavadocJar.archiveBaseName.set(projectName)

	// There's pretty much no reason to use any encoding other than UTF-8 .
	[
		compileJava,
		compileTestJava,
		javadoc
	]*.options*.encoding = 'UTF-8'

	// Disable JDK 8's doclint
	// http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc).tap {
				configureEach {
					// The -quiet is because of some sort of weird JDK JavaCompiler bug:
					// https://discuss.gradle.org/t/passing-arguments-to-compiler-and-javadoc/1661
					options.addStringOption('Xdoclint:none,-missing', '-quiet')
				}
			}
		}
	}

	compileJava {
		// The default Java language level this targets is 8, which is as low as current
		// (Java 20 and newer) JDKs will permit you to target.
		// Targeting Java 7 is the lowest version you could need to go at this point, and
		// to target 7 you need to be using Java 19 or lower. The default used for JitPack
		// builds in this configuration uses Java 21 to build, so you would need to change
		// jitpack.yml to use openjdk17 instead of openjdk21 if you really want to target 7.
		// libGDX itself targets a mix of Java 7 (for most backends) and 8 (for LWJGL3).
		// You must use 8 if any libraries you use need Java 8 (some that
		// come to mind are simple-graphs and jdkgdxds, plus anything that needs LWJGL3).
		sourceCompatibility = 8
		targetCompatibility = 8
		if (JavaVersion.current().isJava9Compatible()) {
			options.release.set(8)
		}
	}

	compileTestJava {
		// LWJGL3 needs Java 8 starting in libGDX 1.11.0, which forces tests that use LWJGL3
		// to use Java 8 or higher. Using options.release enforces compatibility with Java 8,
		// including how NIO Buffers behave (which broke compatibility in Java 9).
		sourceCompatibility = 8
		targetCompatibility = 8
		if (JavaVersion.current().isJava9Compatible()) {
			options.release.set(8)
		}
	}

	// JavaDocs will be published inside the docs/ folder, which you can easily put on GitHub Pages
	// in your repo settings.
	// You may instead want to remove this line if frequent doc changes use up too much repo space,
	// or if you use a different version control host that doesn't host HTML like this.
	javadoc {
		destinationDir = file('docs/apidocs')
		options {
			links 'https://javadoc.io/doc/com.badlogicgames.gdx/gdx/latest/', 'https://c-rack.github.io/cbor-java/apidocs'
		}
	}

	apply plugin: 'idea'
	// This makes IDEA avoid including generated JavaDocs (which are HTML files) in any search results.
	// If you changed where JavaDocs are published above, you should change the next line, too.
	idea.module.excludeDirs += [file("docs/")]

	jar {
		archiveBaseName.set(projectName)
		manifest {
			attributes 'Implementation-Title': projectName, 'Implementation-Version': archiveVersion
		}
	}

	repositories {
		// You can uncomment mavenLocal() if you need self-built versions, but it can be a problem with GWT or other sources dependencies.
		mavenLocal()
		mavenCentral()
		maven { url 'https://s01.oss.sonatype.org' }
		google()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
		// JitPack is a good repo to have if you depend on commit versions.
		// Having the below repo might cause problems if uploading to Maven Central.
		maven { url 'https://jitpack.io' }
	}

	dependencies {
		// Change gdxVersion in gradle.properties to update or downgrade.
		// Libraries that don't use libGDX directly can change the next line
		// from `api` to `testImplementation` .
		api "com.badlogicgames.gdx:gdx:$gdxVersion"
		api 'com.github.SimonIT:cbor-java:bfa48c0b36'//"co.nstant.in:cbor:0.9"
		// "lwjgl3" could be changed to "headless" for command-line-only testing.
		testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
		testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
		testImplementation "org.junit.jupiter:junit-jupiter-api:5.11.4"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.11.4"
	}

	test {
		useJUnitPlatform()
	}

	pitest {
		junit5PluginVersion = '1.2.0'
		outputFormats = ['HTML']
	}

	spotless {
		lineEndings 'UNIX'

		java {

			removeUnusedImports()
			eclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}

		groovyGradle {
			target '*.gradle'
			greclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}
	}
}
